

package rs.ac.bg.etf.pp1;

import java_cup.runtime.*;
import org.apache.log4j.*;
import rs.ac.bg.etf.pp1.ast.*;

parser code {:

	Logger log = Logger.getLogger(getClass());
   
   
    // slede redefinisani metodi za prijavu gresaka radi izmene teksta poruke
     
    public void report_fatal_error(String message, Object info) throws java.lang.Exception {
      done_parsing();
      report_error(message, info);
    }
  
    public void syntax_error(Symbol cur_token) {
        report_error("\nSintaksna greska", cur_token);
    }
  
    public void unrecovered_syntax_error(Symbol cur_token) throws java.lang.Exception {
        report_fatal_error("Fatalna greska, parsiranje se ne moze nastaviti", cur_token);
    }

    public void report_error(String message, Object info) {
    	StringBuilder msg = new StringBuilder(message); 
    	if (info instanceof Symbol)
            msg.append (" na liniji ").append(((Symbol)info).left);
        log.error(msg.toString());
    }


:}


scan with {:
	Symbol s = this.getScanner().next_token();
	if (s != null && s.value != null) 
		log.info(s.toString() + " " + s.value.toString());
	return s;
:}

terminal String IDENT;
terminal Integer NUMBER;
terminal Boolean TRUEFALSE;
terminal Character CHARCONST;
terminal PROG,ELSE,PLUS,RBRACE,RPAREN,EQUAL,SEMI;
terminal RETURN,IF,LPAREN,LBRACE,COMMA,PRINT,VOID;
terminal NAMESPACE,CONST,CLASS,RUPAR,LUPAR,STATIC,POINT;
terminal NEW,FOR,MINUS,BREAK,READ,EXTENDS,CONTINUE;
terminal MUL,DIV,PERCENT,EXCL,GREATER,LESS,AND,OR,COLON;

nonterminal Declaration Declaration;
nonterminal DeclarationList DeclarationList;
nonterminal MethodDeclarationList MethodDeclarationList;
nonterminal ClassDecl ClassDecl;
nonterminal ConstList ConstList;
nonterminal VarPossibility VarPossibility;
nonterminal FormParsVarPossibility FormParsVarPossibility;
nonterminal VarList VarList;
nonterminal FormParsOption FormParsOption;
nonterminal VarDeclList VarDeclList;
nonterminal StatementList StatementList;
nonterminal FormParsList FormParsList;
nonterminal DesignatorStatement DesignatorStatement;
nonterminal StatementOpt1 StatementOpt1;
nonterminal StatementOpt2 StatementOpt2;
nonterminal DesignatorStatementList DesignatorStatementList;
nonterminal DesStmtOptions DesStmtOptions;
nonterminal DesignListRight DesignListRight;
nonterminal Assignop Assignop;
nonterminal ActPars ActPars;
nonterminal ExprList ExprList;
nonterminal Relop Relop;
nonterminal Addop Addop;
nonterminal Mulop Mulop;
nonterminal Minus Minus;
nonterminal IdentOrExprList IdentOrExprList;
nonterminal FactorMethodParams FactorMethodParams;

nonterminal rs.etf.pp1.symboltable.concepts.Obj ProgramName, Program, ConstDecl, Const, VarDecl, MethodName, VarElem;
nonterminal rs.etf.pp1.symboltable.concepts.Obj MethodDeclaration, FormPars, FormPar, For, Statement, IFOpt1, IFOpt2;
nonterminal rs.etf.pp1.symboltable.concepts.Obj Designator, DesignatorName;
nonterminal rs.etf.pp1.symboltable.concepts.Struct ConstOption, Type, MethodOption, Factor, Expr, ExprSpecial, CondFact, AddopTermList;
nonterminal rs.etf.pp1.symboltable.concepts.Struct CondTerm, CondTermList, CondFactList, Condition, Term, MulopFactorList;

precedence left ELSE;

Program ::= (Program) PROG ProgramName:P1 DeclarationList:D2 LBRACE MethodDeclarationList:M3 RBRACE {: RESULT=new Program(P1, D2, M3); RESULT.setLine(P1left); :} ;

ProgramName ::= (ProgramName) IDENT:progName {: RESULT=new ProgramName(progName); RESULT.setLine(progNameleft); :};

DeclarationList ::= (Declarations) Declaration:D1 DeclarationList:D2 {: RESULT=new Declarations(D1, D2); RESULT.setLine(D1left); :}
					|
					(NoDeclarations) {: RESULT=new NoDeclarations(); :} /*nada*/
					;
					
Declaration ::= (ConstDeclaration) ConstDecl:C1 {: RESULT=new ConstDeclaration(C1); RESULT.setLine(C1left); :}
					| (VarDeclaration) VarDecl:V1 {: RESULT=new VarDeclaration(V1); RESULT.setLine(V1left); :}
					;
					
ConstDecl ::= (ConstDecl) CONST Type:T1 IDENT:constName EQUAL ConstOption:C2 ConstList:C3 SEMI {: RESULT=new ConstDecl(T1, constName, C2, C3); RESULT.setLine(T1left); :};


MethodDeclarationList ::= (MethodDeclarations) MethodDeclaration:M1 MethodDeclarationList:M2 {: RESULT=new MethodDeclarations(M1, M2); RESULT.setLine(M1left); :}
					| (NoMethodDeclarations) {: RESULT=new NoMethodDeclarations(); :} /*nada*/
					;
					
MethodDeclaration ::= (MethodDeclaration) MethodOption:M1 MethodName:M2 LPAREN FormParsOption:F3 RPAREN VarDeclList:V4 LBRACE StatementList:S5 RBRACE {: RESULT=new MethodDeclaration(M1, M2, F3, V4, S5); RESULT.setLine(M1left); :} ;

MethodName ::= (MethodName) IDENT:methodName {: RESULT=new MethodName(methodName); RESULT.setLine(methodNameleft); :} ;

MethodOption ::= (MethodOption1) Type:T1 {: RESULT=new MethodOption1(T1); RESULT.setLine(T1left); :}
				| (MethodOption2) VOID {: RESULT=new MethodOption2(); :}
				;

FormParsOption ::= (FormOption1) FormPars:F1 {: RESULT=new FormOption1(F1); RESULT.setLine(F1left); :}
					| (FormOption2) {: RESULT=new FormOption2(); :} /*nada*/
					;
					
FormPars ::= (FormPars) Type:T1 IDENT:paramName FormParsVarPossibility:F2 FormParsList:F3 {: RESULT=new FormPars(T1, paramName, F2, F3); RESULT.setLine(T1left); :} ;

FormParsList ::= (MultipleFormPars) FormPar:F1 FormParsList:F2 {: RESULT=new MultipleFormPars(F1, F2); RESULT.setLine(F1left); :}
					| (NoMultipleFormPars) /*nada*/`
					;

FormPar ::= (FormPar) COMMA Type:T1 IDENT:paramName FormParsVarPossibility:F2 {: RESULT=new FormPar(T1, paramName, F2); RESULT.setLine(T1left); :} ;

VarDeclList ::= (VaroviLista) VarDecl:V1 VarDeclList:V2 {: RESULT=new VaroviLista(V1, V2); RESULT.setLine(V1left); :}
				| (NoVaroviLista) {: RESULT=new NoVaroviLista(); :} /*nada*/
				;

Type ::= (Type) IDENT:typeName {: RESULT=new Type(typeName); RESULT.setLine(typeNameleft); :} ;
		

ConstList ::= (Consts) Const:C1 ConstList:C2 {: RESULT=new Consts(C1, C2); RESULT.setLine(C1left); :} 
				| (NoConsts) {: RESULT=new NoConsts(); :} /*nada*/ 
				;
				
Const ::= (Const) COMMA IDENT:constName EQUAL ConstOption:C1 {: RESULT=new Const(constName, C1); RESULT.setLine(constNameleft); :} ;

ConstOption ::= (ConstOption1) NUMBER:nVal {: RESULT=new ConstOption1(nVal); RESULT.setLine(nValleft); :}
				| (ConstOption2) CHARCONST:cVal {: RESULT=new ConstOption2(cVal); RESULT.setLine(cValleft); :}
				| (ConstOption3) TRUEFALSE:bVal {: RESULT=new ConstOption3(bVal); RESULT.setLine(bValleft); :}
				;

VarDecl ::= (VarDecl) Type:T1 IDENT:varName VarPossibility:V2 VarList:V3 SEMI {: RESULT=new VarDecl(T1, varName, V2, V3); RESULT.setLine(T1left); :} ;
					
VarList ::= (VaroviMnozina) VarElem:V1 VarList:V2 {: RESULT=new VaroviMnozina(V1, V2); RESULT.setLine(V1left); :}
			| (NoVaroviMnozina) {: RESULT=new NoVaroviMnozina(); :} /*nada*/
			;

VarElem ::= (VarElem) COMMA IDENT:varName VarPossibility:V1 {: RESULT=new VarElem(varName, V1); RESULT.setLine(varNameleft); :};

VarPossibility ::= (VarPoss1) LUPAR RUPAR {: RESULT=new VarPoss1(); :}
					| (VarPoss3) LUPAR RUPAR LUPAR RUPAR {: RESULT=new VarPoss3(); :} 
					| (VarPoss2) {: RESULT=new VarPoss2(); :} /*nada*/
					;
					
FormParsVarPossibility ::= (FormParsVar1) LUPAR RUPAR {: RESULT=new FormParsVar1(); :}
							| (FormParsVar2) {: RESULT=new FormParsVar2(); :} /*nada*/
							;
					
StatementList ::= (Statements) Statement:S1 StatementList:S2 {: RESULT=new Statements(S1, S2); RESULT.setLine(S1left); :}
					| (NoStatements) {: RESULT=new NoStatements(); :} /*nada*/
					;

Statement ::= (Statement1) DesignatorStatement:D1 SEMI {: RESULT=new Statement1(D1); RESULT.setLine(D1left); :}
				| (Statement2) IFOpt1:I1 {: RESULT=new Statement2(I1); RESULT.setLine(I1left); :}
				| (Statement3) IFOpt2:I1 {: RESULT=new Statement3(I1); RESULT.setLine(I1left); :}
				| (Statement4) BREAK SEMI {: RESULT=new Statement4(); :}
				| (Statement5) CONTINUE SEMI {: RESULT=new Statement5(); :}
				| (Statement6) RETURN SEMI {: RESULT=new Statement6(); :}
				| (Statement7) RETURN Expr:E1 SEMI {: RESULT=new Statement7(E1); RESULT.setLine(E1left); :}
				| (Statement8) READ LPAREN Designator:D1 RPAREN SEMI {: RESULT=new Statement8(D1); RESULT.setLine(D1left); :}
				| (Statement9) PRINT LPAREN Expr:E1 RPAREN SEMI {: RESULT=new Statement9(E1); RESULT.setLine(E1left); :}
				| (Statement10) PRINT LPAREN Expr:E1 COMMA NUMBER:N2 RPAREN SEMI {: RESULT=new Statement10(E1, N2); RESULT.setLine(E1left); :}
				| (Statement11) For:F1 LPAREN StatementOpt1:S2 SEMI StatementOpt2:S3 SEMI StatementOpt1:S4 RPAREN Statement:S5 {: RESULT=new Statement11(F1, S2, S3, S4, S5); RESULT.setLine(F1left); :}
				| (Statement12) LBRACE StatementList:S1 RBRACE {: RESULT=new Statement12(S1); RESULT.setLine(S1left); :}
				;
				
For ::= (For) FOR {: RESULT=new For(); :} ;
			
IFOpt1 ::= (IFOpt1) IF LPAREN Condition:C1 RPAREN Statement:S2 ELSE Statement:S3 {: RESULT=new IFOpt1(C1, S2, S3); RESULT.setLine(C1left); :} ;

IFOpt2 ::= (IFOpt2) IF LPAREN Condition:C1 RPAREN Statement:S2 {: RESULT=new IFOpt2(C1, S2); RESULT.setLine(C1left); :} ;
				
StatementOpt1 ::= (YesStatementOpt1) DesignatorStatement:D1 DesignatorStatementList:D2 {: RESULT=new YesStatementOpt1(D1, D2); RESULT.setLine(D1left); :}
				| (NoStatementOpt1) {: RESULT=new NoStatementOpt1(); :} /*nada*/
				;

StatementOpt2 ::= (StatementOpt21) CondFact:C1 {: RESULT=new StatementOpt21(C1); RESULT.setLine(C1left); :}
					| (NoStatementOpt2) {: RESULT=new NoStatementOpt2(); :} /*nada*/
					;

DesignatorStatementList ::= (DesignatorStatements) COMMA DesignatorStatement:D1 DesignatorStatementList:D2 {: RESULT=new DesignatorStatements(D1, D2); RESULT.setLine(D1left); :}
							| (NoDesignatorStatements) {: RESULT=new NoDesignatorStatements(); :} /*nada*/
							;

DesignatorStatement ::= (DesignStmt1)Designator:D1 DesStmtOptions:D2 {: RESULT=new DesignStmt1(D1, D2); RESULT.setLine(D1left); :}
						| (DesignStmt2) LUPAR DesignListRight:D1 MUL Designator:D2 RUPAR EQUAL Designator:D3 {: RESULT=new DesignStmt2(D1, D2, D3); RESULT.setLine(D1left); :}
						;
						


DesStmtOptions ::= (DesStmtOpt1) Assignop:A1 Expr:E2 {: RESULT=new DesStmtOpt1(A1, E2); RESULT.setLine(A1left); :}
					| (DesStmtOpt2) LPAREN RPAREN {: RESULT=new DesStmtOpt2(); :}
					| (DesStmtOpt3) LPAREN ActPars:A1 RPAREN {: RESULT=new DesStmtOpt3(A1); RESULT.setLine(A1left); :}
					| (DesStmtOpt4) PLUS PLUS {: RESULT=new DesStmtOpt4(); :}
					| (DesStmtOpt5) MINUS MINUS {: RESULT=new DesStmtOpt5(); :}
					;

DesignListRight ::= (DesignatorRights) Designator:D1 COMMA DesignListRight:D2 {: RESULT=new DesignatorRights(D1, D2); RESULT.setLine(D1left); :}
					| (DesignatorRightsComma) COMMA DesignListRight:D1 {: RESULT=new DesignatorRightsComma(D1); RESULT.setLine(D1left); :}
					| (NoDesignatorRights) {: RESULT=new NoDesignatorRights(); :} /*nada*/
					;

Assignop ::= (Assignop) EQUAL {: RESULT=new Assignop(); :};

ActPars ::= (ActPars) Expr:E1 ExprList:E2 {: RESULT=new ActPars(E1, E2); RESULT.setLine(E1left); :};

ExprList ::= (Exprs) COMMA Expr:E1 ExprList:E2 {: RESULT=new Exprs(E1, E2); RESULT.setLine(E1left); :}
			| (NoExprs) {: RESULT=new NoExprs(); :} /*nada*/
			;	

Condition ::= (Condition) CondTerm:C1 CondTermList:C2 {: RESULT=new Condition(C1, C2); RESULT.setLine(C1left); :};

CondTerm ::= (CondTerm) CondFact:C1 CondFactList:C2 {: RESULT=new CondTerm(C1, C2); RESULT.setLine(C1left); :};

CondFactList ::= (CondFacts) AND AND CondFact:C1 CondFactList:C2 {: RESULT=new CondFacts(C1, C2); RESULT.setLine(C1left); :}
				| (NoCondFacts) {: RESULT=new NoCondFacts(); :} /*nada*/
				;

CondTermList ::= (CondTerms) OR OR CondTerm:C1 CondTermList:C2 {: RESULT=new CondTerms(C1, C2); RESULT.setLine(C1left); :}
				| (NoCondTerms) {: RESULT=new NoCondTerms(); :} /*nada*/
				;

CondFact ::= (CondFact1) Expr:E1 {: RESULT=new CondFact1(E1); RESULT.setLine(E1left); :}
				| (CondFact2) Expr:E1 Relop:R2 Expr:E3 {: RESULT=new CondFact2(E1, R2, E3); RESULT.setLine(E1left); :}
				;

Expr ::= (Expr1) Term:T1 AddopTermList:A2 {: RESULT=new Expr1(T1, A2); RESULT.setLine(T1left); :}
		| (Expr2) Minus:M1 Term:T2 AddopTermList:A3 {: RESULT=new Expr2(M1, T2, A3); RESULT.setLine(M1left); :}
		;
		
		
Minus ::= (Minus) MINUS {: RESULT=new Minus(); :} ;
		
Term ::= (Term) Factor:F1 MulopFactorList:M2 {: RESULT=new Term(F1, M2); RESULT.setLine(F1left); :} ;


AddopTermList ::= (AddopTerms) Addop:A1 Term:T2 AddopTermList:A3 {: RESULT=new AddopTerms(A1, T2, A3); RESULT.setLine(A1left); :}
					| (NoAddopTerms) {: RESULT=new NoAddopTerms(); :} /*nada*/
					;

Designator ::= (Designator) DesignatorName:D1 IdentOrExprList:I2 {: RESULT=new Designator(D1, I2); RESULT.setLine(D1left); :} ;
				
DesignatorName ::= (DesignatorName) IDENT:desName {: RESULT=new DesignatorName(desName); RESULT.setLine(desNameleft); :} ;
				
IdentOrExprList ::= (Express) LUPAR Expr:E1 RUPAR {: RESULT=new Express(E1); RESULT.setLine(E1left); :}
					| (ExpressMatrix) LUPAR Expr:E1 RUPAR LUPAR Expr:E2 RUPAR {: RESULT=new ExpressMatrix(E1, E2); RESULT.setLine(E1left); :}
					| (NoIdentOrExpr) {: RESULT=new NoIdentOrExpr(); :} /*nada*/
					;

Addop ::= (AddopPlus) PLUS {: RESULT=new AddopPlus(); :}
			| (AddopMinus) MINUS {: RESULT=new AddopMinus(); :}
			;

Factor ::= (Factor1) Designator:D1 {: RESULT=new Factor1(D1); RESULT.setLine(D1left); :} 
			| (Factor2) Designator:D1 LPAREN RPAREN {: RESULT=new Factor2(D1); RESULT.setLine(D1left); :}
			| (Factor3) Designator:D1 LPAREN ActPars:A2 RPAREN {: RESULT=new Factor3(D1, A2); RESULT.setLine(D1left); :}
			| (FactoruNm) NUMBER:nVal {: RESULT=new FactoruNm(nVal); RESULT.setLine(nValleft); :}
			| (FactorChar) CHARCONST:cVal {: RESULT=new FactorChar(cVal); RESULT.setLine(cValleft); :}
			| (FactorBool) TRUEFALSE:bVal {: RESULT=new FactorBool(bVal); RESULT.setLine(bValleft); :}
			| (Factor7) NEW Type:T1 LUPAR Expr:E2 RUPAR {: RESULT=new Factor7(T1, E2); RESULT.setLine(T1left); :} 
			| (Factor9) NEW Type:T1 LUPAR Expr:E2 RUPAR LUPAR Expr:E3 RUPAR {: RESULT=new Factor9(T1, E2, E3); RESULT.setLine(T1left); :} /* added for matrix */
			| (Factor8) LPAREN Expr:E1 RPAREN {: RESULT=new Factor8(E1); RESULT.setLine(E1left); :}
			;
			


MulopFactorList ::= (MulopFactors) MulopFactorList:M1 Mulop:M2 Factor:F3 {: RESULT=new MulopFactors(M1, M2, F3); RESULT.setLine(M1left); :} 
					| (NoMulopFactors) {: RESULT=new NoMulopFactors(); :} /*nada*/
					;
					
Mulop ::= (MulopMul) MUL {: RESULT=new MulopMul(); :}
		| (MulopDiv) DIV {: RESULT=new MulopDiv(); :}
		| (MulopPercent) PERCENT {: RESULT=new MulopPercent(); :}
		;
		
Relop ::= (DoubleEqual) EQUAL EQUAL {: RESULT=new DoubleEqual(); :}
			| (NotEqual) EXCL EQUAL {: RESULT=new NotEqual(); :}
			| (OnlyGreater) GREATER {: RESULT=new OnlyGreater(); :}
			| (GreaterEqual) GREATER EQUAL {: RESULT=new GreaterEqual(); :}
			| (OnlyLess) LESS {: RESULT=new OnlyLess(); :}
			| (LessEqual) LESS EQUAL {: RESULT=new LessEqual(); :}
			;







